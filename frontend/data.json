{
	"spec": "https://w3c.github.io/web-animations/",
	
	"effects": ["KeyframeEffect", "GroupEffect", "SequenceEffect"],
	
	"extensions": {
		"Document": {
			"timeline": {
				"description": "A timeline is like a clock - it provides a source of time for the purpose of synchronization. It is fixed with an offset from the global clock.<br><br>In the future we might see other timelines introduced, such as a timeline which is related to the progress of a UI gesture."
			}
		},
		"Element": {
			"animate": {
				"type": "method",
				"description": "Easy shortcut for animating an element, e.g. `elem.animate({ color: 'green' }, 600);`",
				"signature": {
					"frames": {
						"type": "Array<Keyframes>",
						"description": "An array of keyframes to use."
					},
					"options": {
						"type": "<high-light group=\"animate.num\">Number</high-light> or <high-light group=\"animate.opts\">KeyframeEffectOptions</high-light>",
						"description": "Either <high-light group=\"animate.num\">a number specifying duration in milliseconds</high-light> OR <high-light group=\"animate.opts\">an object with properties specifying timing and behaviour of the effect</high-light>."
					}
				}
			},
			"getAnimations": {
				"type": "method",
				"description": "Returns an array of Animation objects whose effect(s) target element is this object",
				"signature": "Element.getAnimations()"
			}
		}
	},
	
	"interfaces": [
		{
			"name": "Animation",
			"description": "Animation is like the video player of web animations, it gives you the ability to play, pause, seek, reverse or modify the playback rate. Usually attached to a clock which is the `document.timeline`.",
			"type": "interface",
			"constructor": {
				"effect": {
					"type": "AnimationEffect",
					"nullable": true
				},
				"timeline": {
					"type": "AnimationTimeline",
					"nullable": true
				}
			},
			"attributes": {
				"id": {
					"type": "String",
					"description": "Used to identify the animation"
				},
				"effect": {
					"type": "AnimationEffect",
					"nullable": true,
					"description": "Effect associated with animation"
				},
				"timeline": {
					"type": "AnimationTimeline",
					"nullable": true,
					"description": "Timeline associated with animation"
				},
				"startTime": {
					"type": "Number",
					"nullable": true,
					"description": "Returns start time of animation"
				},
				"currentTime": {
					"type": "Number",
					"nullable": true,
					"description": "Current time of animation, unless has a pending pause whereby it returns null."
				},
				"playbackRate": {
					"type": "Number",
					"description": "Playback rate of animation"
				},
				"playState": {
					"type": "AnimationPlayState",
					"readonly": true
				},
				"ready": {
					"type": "Promise<Animation>",
					"readonly": true
				},
				"finished": {
					"type": "Promise<Animation>",
					"readonly": true
				},
				"onfinish": {
					"type": "EventHandler"
				},
				"oncancel": {
					"type": "EventHandler"
				}
			},
			"methods": {
				"cancel": {
					"description": "Clears all effects caused by animation and aborts playback"
				},
				"finish": {
					"description": "Seeks to the end of the animation via the current direction"
				},
				"play": {
					"description": "Unpauses and also rewinds to start if it had finished"
				},
				"pause": {
					"description": "Suspends playback of animation"
				},
				"reverse": {
					"description": "Inverts playback rate of animation. Similar to `.play()` will unpause and seek to start in the reversed direction"
				}
			}
		},

		{
			"name": "KeyframeEffect",
			"api": {
				
			},
			
			"docs": [
				{
					"title": "KeyframeEffect",
					"prose": [
						"KeyframeEffect updates CSS properties of a target element over time.",
						"They sit within an Animation and work with the global clock known as the DocumentTimeline."
					],
					"code": [
						"new KeyframeEffect(target, frames, options);",
						"var target = Element || null;\nvar frames = [Keyframes, Keyframes, Keyframes];\nvar options = Number || KeyframeEffectOptions;"
					]
				},
				
				{
					"prose": [
						"<ol class=\"arguments\">\
							<li><high-light group=\"target\"><h4 class=\"argument\">target</h4> is the Element being animated.</high-light><br><br>Can be null for animations that don't target a specific element, for example Animation-driven sounds via Audio API.\
							<li><high-light group=\"frames\"><h4 class=\"argument\">frames</h4> is an array of Keyframes to use.</high-light>\
							<li><h4 class=\"argument\">options</h4> is either a Number specifying duration in milliseconds OR <high-light group=\"options.obj\">an Object with properties specifying timing and behaviour of the effect.</high-light><br><br>For a list & description of the properties see KeyframeEffectOptions.\
						</ol>"
					],
					"code": [
"/// Constructing a KeyframeEffect\
\
// Grab a DOM element to animate\
<high-light group=\"target\">var target = document.querySelector('.my-target');</high-light>\
\
// Keyframes for fade out, start from `opacity: 1` and end at `opacity: 0`\
<high-light group=\"frames\">var frames = [\
	{\
		opacity: 1\
	},\
	{\
		opacity: 0\
	}\
];</high-light>\
\
<high-light group=\"options.obj\">var options = {\
	duration: 300,	// Play effect for 300ms,\
	delay: 100,		// delay it for 100ms,\
	fill: 'both'	// keep CSS active beyond animation (until `.cancel()` is called)\
};</high-light>\
\
var <high-light group=\"node\">effect</high-light> = new KeyframeEffect(<high-light group=\"target\">target</high-light>, <high-light group=\"frames\">frames</high-light>, <high-light group=\"options.obj\">options</high-light>);",

"/// You can use the effect by putting it directly into an animation\
var animation = document.timeline.play(<high-light group=\"node\">effect</high-light>);",

"/// Or alternatively you can composite it with other effects\
var group = new GroupEffect([\
	<high-light group=\"node\">effect</high-light>,\
	otherEffect\
]);\
\
var animation = document.timeline.play(group);"
					]
				},
				
				{
					"summary": "Opacity fade out example",
					"details": "\
var fadeOutEffect = new KeyframeEffect(document.querySelector('div.test'), [\
	{ opacity: 1 },\
	{ opacity: 0 }\
], 500);"
				}
			]
		},

		{
			"name": "KeyframeEffectOptions",
			"type": "dictionary",
			"attributes": {
				"duration": {
					"type": "Number|String",
					"default": "auto",
					"description": "How long the animation takes in milliseconds. The duration is for a single iteration. \"auto\" to allow it to expand to include duration of child effects."
				},
				"delay": {
					"type": "Number",
					"default": 0,
					"description": "Number of milliseconds before the effect starts"
				},
				"endDelay": {
					"type": "Number",
					"default": 0,
					"description": "Number of milliseconds from the end of the animations active interval"
				},
				"fill": {
					"type": "String<FillMode>",
					"default": "auto",
					"description": "The behaviour of the effect of the animation outside of its' active duration."
				},
				"iterationStart": {
					"type": "Number",
					"default": 0,
					"description": "How far into the iteration to start at, can be fractional. For example 0.5 would indicate to start half way into the first iteration."
				},
				"iterations": {
					"type": "Number",
					"default": 1,
					"description": "How many times the animation effect should repeat itself. Fractional iterations are allowed. Positive infinity (Number.POSITIVE_INFINITY) to set it to repeat forever."
				},
				"direction": {
					"type": "String<PlaybackDirection>",
					"direction": "normal",
					"description": "Which direction the animation should playback at: forwards, backwards, or alternate on each iteration."
				},
				"easing": {
					"type": "String",
					"default": "linear",
					"description": "Control over how time impacts the animation."
				},
				"iterationComposite": {
					"type": "String",
					"default": "replace",
					"description": "Defines how animation values should build from iteration to iteration"
				},
				"composite": {
					"type": "String",
					"default": "replace",
					"description": "How this animation should composite with the effect stack (sets the default for all keyframes that don't speciy their own individual keyframe-specific composite operations)"
				},
				"spacing": {
					"type": "String",
					"default": "distribute",
					"values": {
						"distribute": {
							"description": "Distribute keyframes so that they are spaced evenly"
						},
						"paced": {
							"description": "Set the pacing of the keyframes by a property. For example `paced(transform)` would space keyframes so that changes to the transform property occurs at a constant rate"
						}
					}
				}
			}
		}
	]
}
